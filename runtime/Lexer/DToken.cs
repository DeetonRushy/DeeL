namespace Runtime.Lexer;

/// <summary>
/// Represents a token generated by <see cref="DLexer"/>.
/// </summary>
public class DToken
{
    /// <summary>
    /// The character literals that were lexed.
    /// </summary>
    public string Lexeme { get; init; } = null!;

    /// <summary>
    /// The type of token this is.
    /// </summary>
    public TokenType Type { get; init; }

    /// <summary>
    /// The line where this token originates from.
    /// </summary>
    public int Line { get; init; }

    /// <summary>
    /// Optional attached data. This is for if the parser wants some extra information
    /// that the lexer can work out before-hand.
    /// </summary>
    public object? Literal { get; set; }

    /// <summary>
    /// Turn to token into an understandable string.
    /// </summary>
    /// <returns></returns>
    public override string ToString()
    {
        return $"Token({Type}): Content: {Lexeme}";
    }

    /// <summary>
    /// An invalid token.
    /// </summary>
    public static readonly DToken Bad = new()
    {
        Lexeme = string.Empty,
        Type = TokenType.Invalid,
        Line = -1
    };

    public static readonly DToken Whitespace = new()
    {
        Lexeme = string.Empty,
        Type = TokenType.Whitespace,
        Line = -1
    };

    public static DToken MakeVar(TokenType type)
        => new DToken
        {
            Lexeme = string.Empty,
            Line = 0,
            Literal = null,
            Type = type
        };
}